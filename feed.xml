<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ugee0810.github.io//</id><title>Ugee's Tech Blog</title><subtitle>Rearning to C# / Unity 21.3.x</subtitle> <updated>2023-01-01T16:30:39+09:00</updated> <author> <name>송환욱(Song HwanUK)</name> <uri>https://ugee0810.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://ugee0810.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://ugee0810.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2023 송환욱(Song HwanUK) </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>23-01-01(일)</title><link href="https://ugee0810.github.io//posts/Diary-230101/" rel="alternate" type="text/html" title="23-01-01(일)" /><published>2023-01-01T00:00:00+09:00</published> <updated>2023-01-01T00:00:00+09:00</updated> <id>https://ugee0810.github.io//posts/Diary-230101/</id> <content src="https://ugee0810.github.io//posts/Diary-230101/" /> <author> <name>송환욱(Song HwanUK)</name> </author> <category term="Diary" /> <category term="2023.01" /> <summary> 📝 오늘 할 일 Algorithm 알고리즘의 개요 Selection Sort Bubble Sort Insertion Sort Quick Sort </summary> </entry> <entry><title>Algorithm#04 | 퀵 정렬(Quick Sort)</title><link href="https://ugee0810.github.io//posts/Algorithm-4/" rel="alternate" type="text/html" title="Algorithm#04 | 퀵 정렬(Quick Sort)" /><published>2023-01-01T00:00:00+09:00</published> <updated>2023-01-01T16:30:09+09:00</updated> <id>https://ugee0810.github.io//posts/Algorithm-4/</id> <content src="https://ugee0810.github.io//posts/Algorithm-4/" /> <author> <name>송환욱(Song HwanUK)</name> </author> <category term="Algorithm" /> <category term="Sorting" /> <summary> 🎓 동빈나님의 강의 실전 알고리즘 강좌 (Algorithm Programming Tutorial)를 듣고 정리한 내용입니다. 강의 보러 가기 💻 알고리즘 퀵 정렬(Quick Sort) “특정한 값을 기준으로 큰 숫자와 작은 숫자를 나누면 어떨까?” 퀵 정렬은 하나의 큰 문제를 두 개의 작은 문제로 분할하는 식으로 빠르게 정렬합니다. 더 쉽게 말하자면 특정한 값을 기준으로 큰 숫자와 작은 숫자를 서로 교환한 뒤에 배열을 반으로 나눕니다. 퀵 정렬은 대표적인 ‘분할 정복’ 알고리즘으로 평균 속도가 O(N * logN)입니다. 바로 한 번 예시를 통해서 살펴보도록 합시다. 일반적으로 퀵 정렬에서는 기준 값이 있습니다. 이를 피벗(Pivot)이라고도 하는데, 보... </summary> </entry> <entry><title>Algorithm#03 | 삽입 정렬(Insertion Sort)</title><link href="https://ugee0810.github.io//posts/Algorithm-3/" rel="alternate" type="text/html" title="Algorithm#03 | 삽입 정렬(Insertion Sort)" /><published>2023-01-01T00:00:00+09:00</published> <updated>2023-01-01T16:30:09+09:00</updated> <id>https://ugee0810.github.io//posts/Algorithm-3/</id> <content src="https://ugee0810.github.io//posts/Algorithm-3/" /> <author> <name>송환욱(Song HwanUK)</name> </author> <category term="Algorithm" /> <category term="Sorting" /> <summary> 🎓 동빈나님의 강의 실전 알고리즘 강좌 (Algorithm Programming Tutorial)를 듣고 정리한 내용입니다. 강의 보러 가기 💻 알고리즘 삽입 정렬(Insertion Sort) “각 숫자를 적절한 위치에 삽입하면 어떨까?” 삽입 정렬은 각 숫자를 적절한 위치에 삽입하는 방법으로 문제를 해결합니다. 다른 정렬 방식들은 무조건 위치를 바꾸는 방식이었다면 삽입 정렬은 ‘필요할 때만’ 위치를 바꾸게 됩니다. 삽입 정렬은 비교적 느린 정렬 알고리즘에 속하지만 쉽게 생각할 수 없는, 조금은 복잡한 구조를 가지고 있습니다. 만약 데이터가 위와 같이 ‘거의 정렬된’ 상태라면 어떤 알고리즘이 가장 효율적일까요? 바로 지금 우리가 공부하고 있는 삽입 정렬입... </summary> </entry> <entry><title>Algorithm#02 | 버블 정렬(Bubble Sort)</title><link href="https://ugee0810.github.io//posts/Algorithm-2/" rel="alternate" type="text/html" title="Algorithm#02 | 버블 정렬(Bubble Sort)" /><published>2023-01-01T00:00:00+09:00</published> <updated>2023-01-01T16:30:09+09:00</updated> <id>https://ugee0810.github.io//posts/Algorithm-2/</id> <content src="https://ugee0810.github.io//posts/Algorithm-2/" /> <author> <name>송환욱(Song HwanUK)</name> </author> <category term="Algorithm" /> <category term="Sorting" /> <summary> 🎓 동빈나님의 강의 실전 알고리즘 강좌 (Algorithm Programming Tutorial)를 듣고 정리한 내용입니다. 강의 보러 가기 💻 알고리즘 버블 정렬(Bubble Sort) “옆에 있는 값과 비교해서 더 작은 값을 앞으로 보내면 어떨까?” 버블 정렬 또한 선택 정렬과 같이 몹시 직관적인 해결 방법입니다. 바로 가까이에 있는 두 숫자끼리 비교를 해서 당장 더 작은 숫자를 앞으로 보내주는 것을 반복하는 겁니다. 옆에 있는 값과 비교하여 더 작은 값을 반복적으로 앞으로 보내는 정렬 방법입니다. 구현은 가장 쉽지만 가장 비효율적인 알고리즘 📝 문제 다음의 숫자들을 오름차순으로 정렬하는 프로그램을 작성하세요. 1 10 5 8 7 6 4 3 2... </summary> </entry> <entry><title>Unity Lobby(유니티 로비 서비스, 멀티 플레이어)</title><link href="https://ugee0810.github.io//posts/Unity-Lobby/" rel="alternate" type="text/html" title="Unity Lobby(유니티 로비 서비스, 멀티 플레이어)" /><published>2022-11-24T00:00:00+09:00</published> <updated>2022-11-24T00:00:00+09:00</updated> <id>https://ugee0810.github.io//posts/Unity-Lobby/</id> <content src="https://ugee0810.github.io//posts/Unity-Lobby/" /> <author> <name>송환욱(Song HwanUK)</name> </author> <category term="Unity" /> <summary> ※ Practical Environment Unity Editor Version - 2021.3.14f1 ※ Intro 유니티 로비 서비스(Unity Lobby service) 로비 서비스를 사용하면 게임 세션 전이나 도중에 플레이어를 공개 또는 비공개 로비와 연결할 수 있습니다. 로비 서비스를 사용하여 게임 세션을 시작하기 전에 로비에서 플레이어를 함께 그룹화하거나 호스트 플레이어를 사용할 수 없는 경우 연결 손실을 방지할 수 있습니다. 로비는 플레이어가 게임 세션을 만들고 찾을 수 있도록 공개 로비 와 비공개 로비 를 사용하는 두 가지 주요 흐름을 제공 합니다. 다음은 각각의 기능입니다.   Public lobbies Private l... </summary> </entry> </feed>
